
这节主要做的事：
    1. 一直使用的BIO方式传输，接下来将会转为效率更高的NIO方式，
       但不会使用 Java 原生的 NIO，而是采用更为简单的 Netty。
       因此在引入Netty前需要对项目结构和源码进行重新调整，以区分开之前的Socket，实现多种方式传输。

    2. 使用kryo序列化
        kryo的优势：Kryo 是一个快速高效的 Java 对象序列化框架，主要特点是高性能、高效和易用。
        最重要的两个特点，一是基于字节的序列化，对空间利用率较高，在网络传输时可以减小体积；
        二是序列化时记录属性对象的类型信息，这样在反序列化时就不会出现丢失对象的类型信息的问题了。

    3. 使用Hessian序列化



存在的问题：
     1. 使用Json序列化，如果存的是对象，传输过去的话会丢失对象的类型信息，这里需要处理下。
         JSON 的序列化器有一个毛病，就是在某个类的属性反序列化时，如果属性声明为 Object 的，
         就会造成反序列化出错，通常会把 Object 属性直接反序列化成 String 类型，
         就需要其他参数辅助序列化。并且 JSON 序列化器是基于字符串（JSON 串）的，
         占用空间较大且速度较慢。

     2. 出现WARN io.netty.bootstrap.ServerBootstrap - Unknown channel option 'SO_KEEPALIVE'问题
        用childOption设置server端（NettyClient的39-44行）
        用option设置client端（NettyServer的38行）



